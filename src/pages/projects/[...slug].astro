---
import { type CollectionEntry, getCollection } from 'astro:content'

import BaseLayout from '../../layouts/Layout.astro'
import Hero from '../../components/Hero.astro'

interface Props {
	entry: CollectionEntry<'projects'>
}

export async function getStaticPaths() {
	const projects = await getCollection('projects')
	return projects.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}))
}

const { entry } = Astro.props
const { Content } = await entry.render()
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
	<div class="flex flex-col justify-center items-center gap-8 py-8 pb-32">
		<header>
			<Hero title={entry.data.title}>
				<div class="flex gap-2 mt-2 justify-center flex-wrap">
					{entry.data.tags.map((t) => <span class="border-2 border-primary-500 bg-white text-black px-2 rounded-md leading-7 transition-all">{t}</span>)}
				</div>
				<p>{entry.data.publishDate.toDateString()}</p>
				{
					entry.data.github_url &&
					<a href={entry.data.github_url} class="flex justify-center items-center gap-1" target="_blank">
						<svg class="w-6 h-6" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
							<path fill-rule="evenodd" clip-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.82 11.84 2.49 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.16 11.11 3.58 11.8 3.67 12.03C4.39 13.23 5.5 12.89 6.05 12.66C6.13 12.1 6.36 11.73 6.61 11.53C4.77 11.33 2.92 10.64 2.92 7.58C2.92 6.72 3.23 6.06 3.75 5.64C3.67 5.43 3.39 4.61 3.82 3.46C3.82 3.46 4.49 3.25 6.02 4.07C6.67 3.91 7.34 3.83 8.02 3.83C8.69 3.83 9.36 3.91 10.01 4.07C11.54 3.25 12.21 3.46 12.21 3.46C12.64 4.61 12.36 5.43 12.28 5.64C12.81 6.06 13.12 6.72 13.12 7.58C 13.12 10.65 11.26 11.33 9.42 11.53C9.67 11.78 9.9 12.1 9.98 12.66C10.53 12.89 11.64 13.23 12.36 12.03C12.45 11.8 12.87 11.11 13.54 11.12C14.2 11.13 13.8 11.5 13.53 11.65C13.2 11.84 12.79 12.55 12.7 12.78C12.54 13.23 12.02 14.09 10.01 13.72C10.01 14.39 10 15.02 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z" />
						</svg>
						<span>Github</span>
					</a>
				}
			</Hero>
		</header>
		<main class="flex flex-col justify-center gap-4 w-full max-w-5xl">
			<div class="text-lg [&>p:first-child]:first-letter:ml-6 [&>*>a]:relative [&>*>a]:after:absolute [&>*>a]:after:bottom-0 [&>*>a]:after:left-0 [&>*>a]:after:w-full [&>*>a]:after:h-[2px] [&>*>a]:after:bg-black [&>h1]:mb-2 [&>pre]:rounded-md [&>pre]:py-6 [&>pre]:px-4 [&>pre]:my-4 [&>pre>code]:bg-transparent [&>*>img]:rounded-md [&>*>img]:my-2 [&>*>img]:mx-auto [&>*>img]:cursor-pointer" >
				<Content />
			</div>
		</main>
	</div>
	<dialog id="modal" data-modal-target="modal" class="p-0 m-auto rounded-md focus:outline-none">
		<img src="" alt="" />
	</dialog>
</BaseLayout>
<script>
	const imgs = document.getElementsByTagName('img')
	const modal = document.getElementById('modal') as HTMLDialogElement | null
	const modalImg = modal?.querySelector('img')

	if (!modal || !modalImg) {
		throw new Error('Modal not found')
	}

	modal.addEventListener('click', (e) => {
		var rect = modal.getBoundingClientRect()
		var isInDialog = (rect.top <= e.clientY && e.clientY <= rect.top + rect.height &&
			rect.left <= e.clientX && e.clientX <= rect.left + rect.width)
		if (!isInDialog) {
			modal.close()
			modal.classList.remove('fadeUp')
		}
	})

	for (let i = 0; i < imgs.length; i++) {
		const img = imgs[i]
		img.addEventListener('click', () => {
			modalImg.src = img.src
			modal.showModal()
			modal.classList.add('fadeUp')
		})
	}
</script>
<style>
dialog {
	opacity: 0;
	transition: 0.3s ease-out;
}
dialog.fadeUp {
	opacity: 1;
	transition: 0.3s ease-out;
}
</style>
